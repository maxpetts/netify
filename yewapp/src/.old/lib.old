mod components;
mod pages;
mod router;

use gloo::console::log;
use rand::distributions::Alphanumeric;
use rand::Rng;
use router::{switch, Route};
use yew::prelude::*;
use yew_router::prelude::*;

#[derive(Clone, Debug, PartialEq, Properties)]
pub struct User {
    logged: bool,
    state: String,
    auth_token: Option<String>,
    refr_token: Option<String>,
}

// #[function_component(App)]
// pub fn app() -> Html {
//     log!("IN APP");
//     let user = User {
//         logged: false.to_owned(),
//         state: rand::thread_rng()
//             .sample_iter(&Alphanumeric)
//             .take(16)
//             .map(char::from)
//             .collect::<String>()
//             .to_owned(),
//         auth_token: None.to_owned(),
//         refr_token: None.to_owned(),
//     };

//     html! {
//         <ContextProvider<User> context={user}>
//             <BrowserRouter>
//                 <Switch<Route> render={Switch::render(switch)} />
//             </BrowserRouter>
//         </ContextProvider<User>>
//     }
// }

#[derive(Clone, PartialEq)]
struct State {
    logged: bool,
    // state: Option<String>,
}

pub struct App {
    state: State,
}

impl Component for App {
    type Message = ();
    type Properties = ();

    fn create(_ctx: &Context<Self>) -> Self {
        // let app_state = use_state(|| {
        //     rand::thread_rng()
        //         .sample_iter(&Alphanumeric)
        //         .take(16)
        //         .map(char::from)
        //         .collect::<String>()
        // });
        // let app_code = use_state(|| "");

        Self {
            state: State {
                logged: false,
                // state: Some(app_state.to_string()),
            },
        }
    }

    fn view(&self, _ctx: &Context<Self>) -> Html {
        html! {
           <ContextProvider<State> context={self.state.clone()}>
               <BrowserRouter>
                   <Switch<Route> render={Switch::render(switch)} />
               </BrowserRouter>
           </ContextProvider<State>>
        }
    }

    fn rendered(&mut self, ctx: &Context<Self>, first_render: bool) {
        // on first render generate state
        if first_render {
            // self.state.state = Some();
        }
    }
}
